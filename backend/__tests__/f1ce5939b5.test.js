// ********RoostGPT********
// Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
const request = require('supertest');
const express = require('express');
const app = express();

// Middleware that needs to be tested
app.use(function (req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, access-control-allow-origin");
  next();
});

// Dummy route to support testing
app.get('/test-cors', function(req, res) {
  res.status(200).send('CORS enabled');
});

const server = app.listen(3000, () => {
  console.log('Server is running on port 3000');
});


describe('CORS middleware', () => {
  test('It should set the correct CORS headers', async () => {
    const response = await request(app).get('/test-cors');

    expect(response.headers['access-control-allow-origin']).toEqual('*');
    expect(response.headers['access-control-allow-headers']).toEqual('Origin, X-Requested-With, Content-Type, Accept, access-control-allow-origin');
  });

  test('It should allow CORS for all origins', async () => {
    const response = await request(app).get('/test-cors');

    expect(response.headers['access-control-allow-origin']).toBe('*');
  });

  // More test cases can be added here as needed
});

afterAll(async () => {
  // Close app to avoid jest open handle error
  server.close();
});

