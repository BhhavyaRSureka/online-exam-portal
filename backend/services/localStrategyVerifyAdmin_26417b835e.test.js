// ********RoostGPT********
// Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
const bcrypt = require('bcrypt');
const LocalStrategy = require('passport-local').Strategy;
const JwtStrategy = require('passport-jwt').Strategy;
const ExtractJwt = require('passport-jwt').ExtractJwt;
const passport = require('passport');
const config = require('config');

jest.mock('../models/user');
jest.mock('../models/admin');
const userModel = require('../models/user');
const adminModel = require('../models/admin');

const { localStrategyVerifyAdmin } = require('./passportconf');

describe('Local Strategy Verify Admin Function', () => {
  let admin;
  let password;
  let encryptedPassword;

  beforeAll(async () => {
    password = 'secretPassword123';
    encryptedPassword = await bcrypt.hash(password, 10);
  });

  beforeEach(() => {
    admin = {
      _id: 'adminId123',
      username: 'adminUser',
      password: encryptedPassword
    };
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should successfully authenticate an admin with valid credentials', async () => {
    adminModel.findOne.mockImplementation((query, callback) => {
      callback(null, admin);
    });

    await new Promise((done) => {
      localStrategyVerifyAdmin(null, 'adminUser', password, (err, user, info) => {
        expect(err).toBeNull();
        expect(user).toMatchObject(admin);
        expect(info).toMatchObject({ success: true, message: 'logged in successfully' });
        done();
      });
    });
  });

  it('should return server error if there is an error fetching the admin', async () => {
    adminModel.findOne.mockImplementation((query, callback) => {
      const error = new Error('Server error');
      callback(error, null);
    });

    await new Promise((done) => {
      localStrategyVerifyAdmin(null, 'adminUser', password, (err, user, info) => {
        expect(err).toBeInstanceOf(Error);
        expect(err.message).toBe('server error');
        expect(user).toBeFalsy();
        expect(info).toMatchObject({ success: false, message: 'server error' });
        done();
      });
    });
  });

  it('should return user not found if admin does not exist', async () => {
    adminModel.findOne.mockImplementation((query, callback) => {
      callback(null, null);
    });

    await new Promise((done) => {
      localStrategyVerifyAdmin(null, 'nonExistingUser', password, (err, user, info) => {
        expect(err).toBeNull();
        expect(user).toBeFalsy();
        expect(info).toMatchObject({ success: false, message: 'user not found' });
        done();
      });
    });
  });

  it('should return invalid password if password does not match', async () => {
    adminModel.findOne.mockImplementation((query, callback) => {
      callback(null, admin);
    });

    await new Promise((done) => {
      localStrategyVerifyAdmin(null, 'adminUser', 'wrongPassword', (err, user, info) => {
        expect(err).toBeNull();
        expect(user).toBeFalsy();
        expect(info).toMatchObject({ success: false, message: 'invalid password' });
        done();
      });
    });
  });
});

