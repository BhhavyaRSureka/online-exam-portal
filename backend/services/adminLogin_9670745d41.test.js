// ********RoostGPT********
// Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
const { jest } = require('@jest/globals');

const jwt = require('jsonwebtoken');
const config = require('config');
const passport = require('./passportconf');
const { adminLogin } = require('./adminLogin');

const httpMocks = require('node-mocks-http');

describe('Admin Login', () => {
  let request, response, nextFunction;

  beforeEach(() => {
    request = httpMocks.createRequest();
    response = httpMocks.createResponse();
    nextFunction = jest.fn();
    request.check = jest.fn().mockReturnThis();
    request.validationErrors = jest.fn();
    request.login = jest.fn().mockImplementation((user, options, done) => done());
    passport.authenticate = jest.fn((strategy, options, callback) => {
      return (req, res, next) => {
        callback(null, { _id: 1, username: 'adminUser' }, null);
      };
    });
    jwt.sign = jest.fn(() => 'fakeToken');
    config.get = jest.fn(() => 'fakeSecret');
  });

  afterEach(() => {
    jest.resetAllMocks();
  });

  test('it should respond with JSON on invalid inputs', () => {
    request.validationErrors.mockReturnValue(['Invalid inputs']);
    adminLogin(request, response, nextFunction);
    expect(response._getJSONData()).toEqual({
      success: false,
      message: 'Invalid inputs',
      errors: ['Invalid inputs']
    });
    expect(response.statusCode).toBe(200);
  });

  test('it should return info JSON on passport authentication failure', () => {
    passport.authenticate = jest.fn((strategy, options, callback) => {
      return (req, res, next) => {
        callback(null, null, 'Authentication failed');
      };
    });
    adminLogin(request, response, nextFunction);
    expect(response._getJSONData()).toBe('Authentication failed');
  });

  test('it should respond with JSON on server error during login', () => {
    request.login = jest.fn().mockImplementation((user, options, done) => done('Server error'));
    adminLogin(request, response, nextFunction);
    expect(response._getJSONData()).toEqual({
      success: false,
      message: 'server error'
    });
    expect(response.statusCode).toBe(200);
  });

  test('it should generate a JWT token and respond with login successful', () => {
    adminLogin(request, response, nextFunction);
    expect(response._getJSONData()).toEqual({
      success: true,
      message: 'login successful',
      admin: {
        username: 'adminUser',
        _id: 1
      },
      token: 'fakeToken'
    });
    expect(response.statusCode).toBe(200);
  });
});

