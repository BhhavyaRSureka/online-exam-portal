// ********RoostGPT********
// Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import supertest from 'supertest';
import express from 'express';
import bodyParser from 'body-parser';
import jwt from 'jsonwebtoken';
import config from 'config';
import passport from './passportconf';

import adminLogin from './adminLogin';

const app = express();
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json()); // Missing line that might cause bodyParser-related issues
app.post('/admin/login', adminLogin);

describe('Admin Login Tests', () => {
  let server;

  beforeAll(() => {
    server = app.listen(4000);
    // Initialize passport - make sure to use app.use(passport.initialize()) if required
  });

  afterAll((done) => {
    server.close(done);
  });

  test('Login with valid credentials should return a success response with a token', async () => {
    const adminCredentials = {
      username: 'validAdmin',
      password: 'validPass123'
    };

    // Setup passport to simulate successful authentication
    // Ensure that passport.use is properly set up and is using the correct strategy
    // Optionally, mock passport authentication in case the original strategy is complex or depends on an external service

    const response = await supertest(app)
      .post('/admin/login')
      .send(adminCredentials)
      .expect(200);

    expect(response.body.success).toBe(true);
    expect(response.body.message).toBe('login successful');
    expect(response.body.admin).toBeDefined();
    expect(response.body.token).toBeDefined();
  });

  test('Login with invalid credentials should return a message from passport', async () => {
    const response = await supertest(app)
      .post('/admin/login')
      .send({ username: 'invalidAdmin', password: 'invalidPass' })
      .expect(200);

    expect(response.body.success).toBe(false);
    expect(response.body.message).toBe('Invalid credentials');
  });

  test('Login without credentials should return an error for invalid inputs', async () => {
    const response = await supertest(app)
      .post('/admin/login')
      .send({ username: '', password: '' })
      .expect(200);

    expect(response.body.success).toBe(false);
    expect(response.body.message).toBe('Invalid inputs');
    expect(response.body.errors).toBeDefined();
    expect(Array.isArray(response.body.errors)).toBe(true);
  });

  test('Login with short password should return an error for invalid inputs', async () => {
    const response = await supertest(app)
      .post('/admin/login')
      .send({ username: 'validAdmin', password: '123' }) // password too short
      .expect(200);

    expect(response.body.success).toBe(false);
    expect(response.body.message).toBe('Invalid inputs');
    expect(response.body.errors).toBeDefined();
    expect(Array.isArray(response.body.errors)).toBe(true);
  });
});

