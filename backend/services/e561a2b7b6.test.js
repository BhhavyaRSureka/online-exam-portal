// ********RoostGPT********
// Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
const mongoose = require("mongoose");
const config = require('config');
const { jest } = require('@jest/globals');
const adminService = require("../services/admin");

// Mocking the console object
global.console = { 
  log: jest.fn(),
  error: jest.fn()
};

// Mocking adminService
jest.mock('../services/admin', () => ({
  addAdminIfNotFound: jest.fn()
}));

describe('MongoDB Connection', () => {
  let mongodbConnectionString;
  
  beforeAll(() => {
    mongodbConnectionString = config.get('mongodb.connectionString');
    // Disconnect from any existing connection before running tests
    if (mongoose.connection.readyState !== 0) {
      return mongoose.disconnect();
    }
  });

  afterEach(() => {
    // Resolve any hanging operations
    jest.restoreAllMocks();
    if (mongoose.connection.readyState !== 0) {
      return mongoose.disconnect();
    }
  });

  test('should connect to MongoDB and log success', async () => {
    // Mocking mongoose.connect method to resolve
    mongoose.connect = jest.fn().mockResolvedValue('connected');
    
    // Action: Connect to the database
    await mongoose.connect(mongodbConnectionString, {}).then(() => {
      console.log("connected to mongoDB");
      adminService.addAdminIfNotFound();
    });

    // Assertions
    expect(mongoose.connect).toHaveBeenCalled();
    expect(mongoose.connect).toHaveBeenCalledWith(mongodbConnectionString, {});
    expect(console.log).toHaveBeenCalledWith("connected to mongoDB");
    expect(adminService.addAdminIfNotFound).toHaveBeenCalled();
  });

  test('should fail to connect to MongoDB and log error', async () => {
    // Mocking mongoose.connect method to reject
    const error = new Error("Connection failed");
    mongoose.connect = jest.fn().mockRejectedValue(error);

    // Action: Attempt to connect to the database
    try {
      await mongoose.connect(mongodbConnectionString, {}).then(() => {
        console.log("connected to mongoDB");
        adminService.addAdminIfNotFound();
      });
    } catch (err) {
      console.error("Error connecting to database", err);
    }

    // Assertions
    expect(mongoose.connect).toHaveBeenCalled();
    expect(mongoose.connect).toHaveBeenCalledWith(mongodbConnectionString, {});
    expect(console.error).toHaveBeenCalledWith("Error connecting to database", error);
    // addAdminIfNotFound should not be called
    expect(adminService.addAdminIfNotFound).not.toHaveBeenCalled();
  });
});

