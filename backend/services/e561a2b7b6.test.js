// ********RoostGPT********
// Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
const mongoose = require("mongoose");
const config = require("config");
const adminService = require("../services/admin");

// jest.mocks to simulate mongoose connection and admin service behavior
jest.mock("mongoose", () => ({
  connect: jest.fn(),
}));
jest.mock("../services/admin", () => ({
  addAdminIfNotFound: jest.fn(),
}));

describe("Database Connection and Admin Check", () => {
  // set up before all tests
  beforeAll(() => {
    // Additional global setup if necessary
  });

  // clean up after all tests
  afterAll(() => {
    jest.clearAllMocks(); // Clear all mocks after each test suite runs
    // Additional cleanup if necessary
  });

  test("Should connect to the mongoDB successfully and add an admin if not found", async () => {
    const successfulConnectionResponse = Promise.resolve();
    mongoose.connect.mockImplementation(() => successfulConnectionResponse);
    adminService.addAdminIfNotFound.mockImplementationOnce(() => {});

    await mongoose.connect(config.get("mongodb.connectionString"), {});
    expect(mongoose.connect).toHaveBeenCalled();
    await successfulConnectionResponse; // Wait for the connection promise to resolve
    expect(adminService.addAdminIfNotFound).toHaveBeenCalled();
  });

  test("Should log an error if the database connection fails", async () => {
    const connectionError = new Error("Error connecting to database");
    mongoose.connect.mockImplementation(() => Promise.reject(connectionError));
    console.log = jest.fn(); // Mocking console.log to check if it gets called

    try {
      await mongoose.connect(config.get("mongodb.connectionString"), {});
    } catch (err) {
      // The error is expected to be caught here, so we are intentionally not handling it
    }

    expect(mongoose.connect).toHaveBeenCalled();
    expect(console.log).toHaveBeenCalledWith(
      "Error connecting to database",
      connectionError
    );
  });
});

