// ********RoostGPT********
// Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
const request = require('supertest');
const express = require('express');
const bodyParser = require('body-parser');
const adminRoutes = require('./admin');
const app = express();
const { describe, beforeAll, beforeEach, test, expect, afterEach, afterAll } = require('@jest/globals');
const jest = require('jest-mock');

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use('/admin', adminRoutes);

// Mocked models and services
jest.mock('../models/user', () => {
  return {
    findOne: jest.fn(),
    save: jest.fn()
  };
});
jest.mock('./tool', () => {
  return {
    hashPassword: jest.fn()
  };
});

describe('Admin Teacher Registration', () => {
  let userModel;
  let tool;

  beforeAll(() => {
    userModel = require('../models/user');
    tool = require('./tool');
  });

  beforeEach(() => {
    userModel.findOne.mockClear();
    userModel.save.mockClear();
    tool.hashPassword.mockClear();
  });

  test('It should register a teacher successfully', async () => {
    userModel.findOne.mockResolvedValue(null);
    tool.hashPassword.mockResolvedValue('hashedpassword');
    userModel.save.mockResolvedValue({});

    const response = await request(app)
      .post('/admin/register')
      .send({
        username: 'testTeacher',
        email: 'teacher@test.com',
        password: 'password123',
        user: {
          _id: 'mockCreatorId'
        }
      });

    expect(response.statusCode).toBe(200);
    expect(response.body.success).toBe(true);
    expect(response.body.message).toBe('Profile created successfully!');
    expect(tool.hashPassword).toHaveBeenCalledWith('password123');
  });

  test('It should fail to register a teacher with existing email', async () => {
    userModel.findOne.mockResolvedValue({ email: 'teacher@test.com' });

    const response = await request(app)
      .post('/admin/register')
      .send({
        username: 'testTeacher',
        email: 'teacher@test.com',
        password: 'password123',
        user: {
          _id: 'mockCreatorId'
        }
      });

    expect(response.statusCode).toBe(200);
    expect(response.body.success).toBe(false);
    expect(response.body.message).toBe('This email is already exists!');
  });

  test('It should reject registration without required fields', async () => {
    const response = await request(app)
      .post('/admin/register')
      .send({
        user: {
          _id: 'mockCreatorId'
        }
      });

    expect(response.statusCode).toBe(200);
    expect(response.body.success).toBe(false);
    expect(response.body.message).toBe('Invalid inputs');
    expect(response.body.errors).toBeDefined();
  });

  test('It should fail to register a teacher without permission', async () => {
    const response = await request(app)
      .post('/admin/register')
      .send({
        username: 'testTeacher',
        email: 'teacher@test.com',
        password: 'password123'
        // Missing 'user' in request body to simulate no permission
      });

    expect(response.statusCode).toBe(401);
    expect(response.body.success).toBe(false);
    expect(response.body.message).toBe('Permissions not granted!');
  });

  // Add more test cases if needed

  afterEach(() => {
    // Cleanup tasks if necessary
  });

  afterAll(() => {
    // Cleanup tasks if necessary
  });
});

