// ********RoostGPT********
// Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
const { unblockSubject } = require('./admin');
const httpMocks = require('node-mocks-http');
const subjectModel = require('../models/subject');
const adminModel = require('../models/admin');
const userService = require('../services/tool');

jest.mock('../models/user');
jest.mock('../models/subject');
jest.mock('./tool');
jest.mock('../models/admin');
jest.mock('../services/tool');

describe('unblockSubject', () => {
  let req, res, next;
  beforeEach(() => {
    req = httpMocks.createRequest();
    res = httpMocks.createResponse();
    next = jest.fn();
  });

  test('should send a 401 status if user is not authenticated', () => {
    req.user = null;
    
    unblockSubject(req, res, next);

    expect(res.statusCode).toBe(401);
    expect(res._getJSONData()).toEqual({
      success: false,
      message: "Permissions not granted!"
    });
  });

  test('should send a success message if subject is unblocked successfully', async () => {
    req.user = { id: 'user-id' };
    req.body._id = 'subject-id';
    subjectModel.findOneAndUpdate.mockResolvedValue(true);

    await unblockSubject(req, res, next);

    expect(subjectModel.findOneAndUpdate).toHaveBeenCalledWith({ _id: 'subject-id' }, { status: true }, { new: true });
    expect(res.statusCode).toBe(200);
    expect(res._getJSONData()).toEqual({
      success: true,
      message: "Subject has been unblocked"
    });
  });

  test('should send a 500 status if unable to unblock the subject', async () => {
    req.user = { id: 'user-id' };
    req.body._id = 'subject-id';
    const error = new Error('Unable to unblock subject');
    subjectModel.findOneAndUpdate.mockRejectedValue(error);

    await unblockSubject(req, res, next);

    expect(subjectModel.findOneAndUpdate).toHaveBeenCalledWith({ _id: 'subject-id' }, { status: true }, { new: true });
    expect(res.statusCode).toBe(500);
    expect(res._getJSONData()).toEqual({
      success: false,
      message: "Unable to unblock subject"
    });
  });
});

