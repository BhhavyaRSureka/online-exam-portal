// ********RoostGPT********
// Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
// Include this import at the beginning of your test file
const jest = require('jest-mock');

// Regenerated Jest test case
const userModel = require('../models/user');
const subjectModel = require('../models/subject');
const tool = require('./tool');
const adminModel = require('../models/admin');
const { hashPassword } = require('../services/tool');
const adminMethods = require('./admin'); // Assuming the provided function is exported from admin.js

describe('admin.js - addAdminIfNotFound method test suite', () => {
  let mockFindOne, mockSave, mockHashPassword;

  beforeAll(() => {
    mockFindOne = jest.spyOn(adminModel, 'findOne');
    mockSave = jest.fn();
    mockHashPassword = jest.spyOn(tool, 'hashPassword');
    adminModel.prototype.save = mockSave;
  });

  beforeEach(() => {
    // Reset mocks before each test
    mockFindOne.mockReset();
    mockSave.mockReset();
    mockHashPassword.mockReset();
  });

  afterAll(() => {
    // Restore mocks after all tests
    mockFindOne.mockRestore();
    mockHashPassword.mockRestore();
  });

  test('should not add a new admin if admin already exists', async () => {
    mockFindOne.mockResolvedValue({ username: 'sysadmin' });

    await adminMethods.addAdminIfNotFound();

    expect(mockFindOne).toHaveBeenCalledWith({ 'username': 'sysadmin' });
    expect(mockHashPassword).not.toHaveBeenCalled();
    expect(mockSave).not.toHaveBeenCalled();
    expect(console.log).toHaveBeenCalledWith("Admin user found");
  });

  test('should add a new admin if admin does not exist', async () => {
    mockFindOne.mockResolvedValue(null);
    mockHashPassword.mockResolvedValue('hashedPassword');
    mockSave.mockResolvedValue({});

    await adminMethods.addAdminIfNotFound();

    expect(mockFindOne).toHaveBeenCalledWith({ 'username': 'sysadmin' });
    expect(mockHashPassword).toHaveBeenCalledWith("systemadmin");
    expect(mockSave).toHaveBeenCalledTimes(1);
    expect(mockSave).toHaveBeenLastCalledWith();
    expect(console.log).toHaveBeenCalledWith("Admin added successfully !!");
  });

  test('should handle errors when finding admin fails', async () => {
    const mockError = new Error("Database find error");
    mockFindOne.mockRejectedValue(mockError);

    await adminMethods.addAdminIfNotFound();

    expect(mockFindOne).toHaveBeenCalledWith({ 'username': 'sysadmin' });
    expect(console.error).toHaveBeenCalledWith(mockError);
  });

  test('should handle errors when saving new admin fails', async () => {
    mockFindOne.mockResolvedValue(null);
    mockHashPassword.mockResolvedValue('hashedPassword');
    const mockError = new Error("Database save error");
    mockSave.mockRejectedValue(mockError);

    await adminMethods.addAdminIfNotFound();

    expect(mockSave).toHaveBeenCalledTimes(1);
    expect(console.error).toHaveBeenCalledWith(mockError);
  });
});

