// ********RoostGPT********
// Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import { jest } from '@jest/globals';
import subjectModel from '../models/subject';
import questionModel from '../models/question';
import httpMocks from 'node-mocks-http';
import { addQuestion } from '../question';

// Mock the relevant modules
jest.mock('../models/subject');
jest.mock('../models/question');

describe('addQuestion', () => {
  let req, res, next;

  beforeEach(() => {
    req = httpMocks.createRequest({
      method: 'POST',
      url: '/question',
      user: { _id: 'userId1', usertype: 'TEACHER' },
      body: {
        body: 'This is a question body',
        options: ['Option 1', 'Option 2', 'Option 3'],
        marks: 2,
        subject: 'subjectId1',
        answer: 'Option 1'
      }
    });
    res = httpMocks.createResponse();
    next = jest.fn();
    req.check = jest.fn().mockReturnThis();
    req.validationErrors = jest.fn();
    subjectModel.findOne = jest.fn();
    questionModel.prototype.save = jest.fn();
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test('should respond with status 401 if user is not a teacher', () => {
    req.user.usertype = 'STUDENT';
    addQuestion(req, res, next);
    expect(res.statusCode).toBe(401);
    expect(res._getData()).toHaveProperty('success', false);
  });

  test('should respond with error message if question body is empty', () => {
    req.body.body = '';
    req.validationErrors.mockReturnValue([{ msg: 'Empty Question' }]);
    addQuestion(req, res, next);
    expect(res.statusCode).toBe(200);
    expect(res._getData()).toHaveProperty('success', false);
    expect(res._getData().errors).toEqual(expect.arrayContaining([{ msg: 'Empty Question' }]));
  });

  // Add more test cases for each validation check
  
  // Success case test
  test('should create a question successfully', async () => {
    subjectModel.findOne.mockResolvedValue({ _id: req.body.subject, status: true });
    questionModel.prototype.save.mockImplementationOnce(cb => cb(null, {}));
    await addQuestion(req, res, next);
    expect(res.statusCode).toBe(200);
    expect(res._getData()).toHaveProperty('success', true);
    expect(res._getData().message).toBe('Question created successfully!');
  });

  // More tests like invalid marks, invalid options, invalid answer, etc. can be added similarly
});

