// ********RoostGPT********
// Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
const bcrypt = require('bcrypt');
const saltRounds = 10;

// Mock modules and methods used in the jwtStrategyVeriryAdmin function
jest.mock('bcrypt');
jest.mock('../models/user', () => ({
  findById: jest.fn(),
}));
jest.mock('../models/admin', () => ({
  findById: jest.fn(),
}));

// Import the method from passportconf.js to be tested
const { jwtStrategyVeriryAdmin } = require('./passportconf');

describe('jwtStrategyVeriryAdmin', () => {
  let admin;
  let jwt_payload;

  // Create a pseudo admin object and JWT payload prior to running tests
  beforeAll(() => {
    admin = {
      _id: 'admin123',
      username: 'admin',
      password: bcrypt.hashSync('password', saltRounds),
    };
    jwt_payload = { _id: admin._id };

    bcrypt.compareSync.mockImplementation((password, hash) => hash === bcrypt.hashSync(password, saltRounds));
  });

  test('should return a valid admin on successful JWT verification', (done) => {
    require('../models/admin').findById.mockImplementation((id, callback) => {
      callback(null, admin);
    });

    jwtStrategyVeriryAdmin(jwt_payload, (err, admin, info) => {
      expect(err).toBeNull();
      expect(info).toEqual({
        success: true,
        message: 'successful',
      });
      expect(admin).toEqual(admin);
      done();
    });
  });

  test('should return an error on server error', (done) => {
    require('../models/admin').findById.mockImplementation((id, callback) => {
      callback(new Error('server error'), null);
    });

    jwtStrategyVeriryAdmin(jwt_payload, (err, admin, info) => {
      expect(err).toEqual(new Error('server error'));
      expect(info).toEqual({
        success: false,
        message: 'server error',
      });
      expect(admin).toBeFalsy();
      done();
    });
  });

  test('should return failure if admin not found in database', (done) => {
    require('../models/admin').findById.mockImplementation((id, callback) => {
      callback(null, null);
    });

    jwtStrategyVeriryAdmin(jwt_payload, (err, admin, info) => {
      expect(err).toBeNull();
      expect(info).toEqual({
        success: false,
        message: 'Authorization failed',
      });
      expect(admin).toBeFalsy();
      done();
    });
  });

  // Add any afterEach or afterAll if needed for cleanup
});

