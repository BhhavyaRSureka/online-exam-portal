// ********RoostGPT********
// Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
# updated jest test case

const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const JwtStrategy = require('passport-jwt').Strategy;
const ExtractJwt = require('passport-jwt').ExtractJwt;
const bcrypt = require('bcrypt');
const saltRounds = 10;
const config = require('config');
const userModel = require('../models/user');
const adminModel = require('../models/admin');

const { jwtStrategyVeriryAdmin } = require('./passportconf');

jest.mock('../models/admin');

// Mocked admin data for testing
const mockAdmin = {
  _id: 'admin123',
  username: 'testadmin',
  password: 'password',
};

// Mock adminModel.findById functionality
adminModel.findById.mockImplementation((id, callback) => {
  process.nextTick(() => {
    if (id === mockAdmin._id) {
      callback(null, mockAdmin);
    } else {
      callback(new Error('Admin not found'), null);
    }
  });
});

describe('jwtStrategyVerifyAdmin', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('should return admin and success message if admin is found', (done) => {
    const jwt_payload = { _id: mockAdmin._id };
    jwtStrategyVeriryAdmin(jwt_payload, (err, admin, response) => {
      expect(err).toBeNull();
      expect(admin).toEqual(mockAdmin);
      expect(response).toEqual({
        success: true,
        message: 'successful'
      });
      done();
    });
  });

  test('should return error if there is a server error', (done) => {
    adminModel.findById.mockImplementationOnce((id, callback) => {
      process.nextTick(() => {
        callback(new Error('Server error'), null);
      });
    });

    const jwt_payload = { _id: 'someInvalidId' };
    jwtStrategyVeriryAdmin(jwt_payload, (err, admin, response) => {
      expect(err).toBeInstanceOf(Error);
      expect(err.message).toBe('Server error');
      expect(admin).toBeFalsy();
      expect(response).toEqual({
        success: false,
        message: 'server error'
      });
      done();
    });
  });

  test('should return false and error message if admin not found', (done) => {
    const jwt_payload = { _id: 'nonExistentAdminId' };
    jwtStrategyVeriryAdmin(jwt_payload, (err, admin, response) => {
      expect(err).toBeNull();
      expect(admin).toBeFalsy();
      expect(response).toEqual({
        success: false,
        message: 'Authorization failed'
      });
      done();
    });
  });

  // Additional test cases can be added here if needed
});

