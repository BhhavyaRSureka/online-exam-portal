// ********RoostGPT********
// Test generated by RoostGPT for test NodeTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import request from 'supertest';
import express from 'express';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import { afterAll, beforeAll, describe, expect, test } from '@jest/globals';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();

app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

describe('Test suite for the app.get wildcard route', () => {
  let server;

  beforeAll(() => {
    server = app.listen(4000);
  });

  afterAll((done) => {
    server.close(done);
  });

  test('It should serve the index.html file on any route', async () => {
    const res = await request(app).get('/anyroute');
    expect(res.statusCode).toBe(200);
    expect(res.type).toBe('text/html');
  });

  test('It should serve the index.html file on root route', async () => {
    const res = await request(app).get('/');
    expect(res.statusCode).toBe(200);
    expect(res.type).toBe('text/html');
  });

  test('It should serve the index.html file on nested route', async () => {
    const res = await request(app).get('/nested/route');
    expect(res.statusCode).toBe(200);
    expect(res.type).toBe('text/html');
  });

  test('It should return 404 for non-existent files', async () => {
    const res = await request(app).get('/nonexistent.js');
    expect(res.statusCode).toBe(404);
  });

  test('It should handle query parameters correctly', async () => {
    const res = await request(app).get('/?query=test');
    expect(res.statusCode).toBe(200);
    expect(res.type).toBe('text/html');
  });

});

