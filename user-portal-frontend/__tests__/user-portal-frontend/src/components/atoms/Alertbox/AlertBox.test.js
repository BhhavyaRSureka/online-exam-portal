// ********RoostGPT********
// Test generated by RoostGPT for test ReactTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
import React from 'react';
import { mount } from 'enzyme';
import configureStore from 'redux-mock-store';
import { Provider } from 'react-redux';
import AlertBox from '../../../../src/components/atoms/Alertbox/AlertBox.js';
import { clearAlert } from '../../../../src/redux/actions/alertAction';

// Mocking the necessary imports
jest.mock('../../../../src/redux/actions/alertAction', () => ({
  clearAlert: jest.fn(),
}));

// Setting up the initial state for the mock Redux store
const initialState = {
  alertDetails: {
    isAlert: false,
    message: '',
    title: '',
    type: '',
  },
};
const mockStore = configureStore();
let store;

describe('AlertBox Component', () => {
  beforeEach(() => {
    // Create a new mock store instance for each test case
    store = mockStore(initialState);
  });

  test('should not render an Alert if isAlert is false', () => {
    const wrapper = mount(
      <Provider store={store}>
        <AlertBox />
      </Provider>
    );
    expect(wrapper.find(Alert).exists()).toBe(false);
  });

  test('should render an Alert with props when isAlert is true', () => {
    // Update the initial state for this test case
    store = mockStore({
      alertDetails: {
        isAlert: true,
        message: 'Test Message',
        title: 'Test Title',
        type: 'error',
      },
    });
    const wrapper = mount(
      <Provider store={store}>
        <AlertBox />
      </Provider>
    );
    
    // Check if the Alert is present and has the expected properties
    const alert = wrapper.find(Alert);
    expect(alert.exists()).toBe(true);
    expect(alert.prop('severity')).toEqual('error');
    expect(alert.find(AlertTitle).text()).toEqual('Test Title');
    expect(alert.text()).toContain('Test Message');
    
    // Simulate closing the Alert and verify if clearAlert action is dispatched
    alert.prop('onClose')();
    expect(clearAlert).toHaveBeenCalledTimes(1);
  });
  
  // Additional test cases can be added here, e.g., for different alert types
  // ...
});

