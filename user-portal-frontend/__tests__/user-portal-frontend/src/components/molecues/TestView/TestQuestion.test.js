// ********RoostGPT********
// Test generated by RoostGPT for test ReactTest using AI Type Open AI and AI Model gpt-4-1106-preview



// ********RoostGPT********
// Import React and Testing Utilities
import React from 'react';
import { render, cleanup, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import { Provider } from 'react-redux';
import { createStore } from 'redux';

// Import component and actions
import TestQuestion from '../../../../../../src/components/molecues/TestView/TestQuestion';
import { selectedOptionAction } from '../../../../../../src/redux/actions/takeTestAction';

// Mock styles
const useStyles = jest.fn();

// Redux Mock Store
const store = createStore(() => ({
  takeTestDetails: {
    questionid: {},
    answersheet: {
      answers: []
    }
  }
}));

// Clean-up after each test
afterEach(cleanup);

describe('TestQuestion Component', () => {
  test('renders without crashing', () => {
    const { container } = render(
      <Provider store={store}>
        <TestQuestion classes={useStyles} />
      </Provider>
    );
    expect(container).toBeInTheDocument();
  });

  test('displays question and options when `question` is defined', () => {
    const taketestProp = {
      questionid: {
        '1': {
          body: 'What is the capital of France?',
          options: ['Paris', 'Rome', 'Berlin', 'Madrid']
        }
      },
      answersheet: {
        answers: ['Paris']
      }
    };

    const { getByLabelText, getByText } = render(
      <Provider store={store}>
        <TestQuestion question="1" taketest={taketestProp} classes={useStyles} />
      </Provider>
    );

    expect(getByText('What is the capital of France?')).toBeInTheDocument();
    expect(getByLabelText('Paris')).toBeInTheDocument();
  });

  test('`optionSelectHandler` is called on option select', () => {
    // Mock the `selectedOptionAction`
    const selectedOptionActionMock = jest.fn();
    jest.mock('../../../../../../src/redux/actions/takeTestAction', () => ({
      selectedOptionAction: selectedOptionActionMock
    }));

    const taketestProp = {
      questionid: {
        '1': {
          body: 'Select the correct answer.',
          options: ['Option A', 'Option B', 'Option C', 'Option D']
        }
      },
      answersheet: {
        answers: ['Option A']
      }
    };

    const { getByLabelText } = render(
      <Provider store={store}>
        <TestQuestion question="1" taketest={taketestProp} classes={useStyles} />
      </Provider>
    );

    fireEvent.click(getByLabelText('Option B'));
    expect(selectedOptionActionMock).toHaveBeenCalledWith({
      index: '1',
      ans: 'Option B'
    });
  });
});

